// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keyringPoc/keyring/v1/service.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("keyringPoc/keyring/v1/service.proto", fileDescriptor_92abfd958a095a85)
}

var fileDescriptor_92abfd958a095a85 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0x4e, 0xad, 0x2c,
	0xca, 0xcc, 0x4b, 0x0f, 0xc8, 0x4f, 0xd6, 0x87, 0x32, 0xf5, 0xcb, 0x0c, 0xf5, 0x8b, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8, 0xa0, 0x32, 0x7a, 0x65,
	0x86, 0x52, 0x38, 0x34, 0x14, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x40, 0x34, 0x18, 0x3d, 0x61,
	0xe2, 0xe2, 0xf3, 0x86, 0x48, 0x06, 0x43, 0x4c, 0x12, 0x72, 0xe2, 0x62, 0x77, 0x4a, 0x4c, 0xce,
	0x4e, 0xcd, 0x4b, 0x11, 0x92, 0xd2, 0x43, 0x98, 0xa7, 0x07, 0x15, 0x0c, 0x82, 0xe8, 0x97, 0x92,
	0xc6, 0x2a, 0x57, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x64, 0xc6, 0xc5, 0xec, 0x9d, 0x5a, 0x29,
	0x24, 0x86, 0xac, 0xc6, 0x3b, 0xb5, 0x12, 0xa6, 0x57, 0x1c, 0x43, 0x1c, 0xaa, 0xcf, 0x9b, 0x8b,
	0xcb, 0x2f, 0xb5, 0xdc, 0x31, 0x39, 0x39, 0xbf, 0x34, 0xaf, 0x44, 0x48, 0x16, 0x59, 0x19, 0x42,
	0x1c, 0x66, 0x8a, 0x1c, 0x2e, 0x69, 0xa8, 0x61, 0x96, 0x5c, 0x2c, 0xc1, 0x99, 0xe9, 0x79, 0x42,
	0x28, 0xb6, 0x81, 0x44, 0x60, 0x06, 0x48, 0x60, 0x4a, 0x40, 0xb5, 0xfa, 0x71, 0x71, 0x07, 0x27,
	0x96, 0xa5, 0xfa, 0xa7, 0xa5, 0xe5, 0x64, 0xe6, 0xa5, 0x0a, 0xa1, 0xd8, 0x84, 0x24, 0x01, 0x33,
	0x48, 0x1e, 0xa7, 0x3c, 0xc4, 0x3c, 0x27, 0x97, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96,
	0x63, 0x88, 0xd2, 0x4a, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xaf, 0xca,
	0xcf, 0x4b, 0x49, 0xac, 0xd0, 0xc7, 0x12, 0x6f, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0,
	0x38, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x74, 0x0d, 0xbe, 0x0b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyringServiceClient is the client API for KeyringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyringServiceClient interface {
	Backend(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error)
	Key(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SaveOffline(ctx context.Context, in *SaveOfflineRequest, opts ...grpc.CallOption) (*SaveOfflineResponse, error)
}

type keyringServiceClient struct {
	cc grpc1.ClientConn
}

func NewKeyringServiceClient(cc grpc1.ClientConn) KeyringServiceClient {
	return &keyringServiceClient{cc}
}

func (c *keyringServiceClient) Backend(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error) {
	out := new(BackendResponse)
	err := c.cc.Invoke(ctx, "/keyring.v1.KeyringService/Backend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringServiceClient) Key(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, "/keyring.v1.KeyringService/Key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringServiceClient) NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error) {
	out := new(NewAccountResponse)
	err := c.cc.Invoke(ctx, "/keyring.v1.KeyringService/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringServiceClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/keyring.v1.KeyringService/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringServiceClient) SaveOffline(ctx context.Context, in *SaveOfflineRequest, opts ...grpc.CallOption) (*SaveOfflineResponse, error) {
	out := new(SaveOfflineResponse)
	err := c.cc.Invoke(ctx, "/keyring.v1.KeyringService/SaveOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyringServiceServer is the server API for KeyringService service.
type KeyringServiceServer interface {
	Backend(context.Context, *BackendRequest) (*BackendResponse, error)
	Key(context.Context, *KeyRequest) (*KeyResponse, error)
	NewAccount(context.Context, *NewAccountRequest) (*NewAccountResponse, error)
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	SaveOffline(context.Context, *SaveOfflineRequest) (*SaveOfflineResponse, error)
}

// UnimplementedKeyringServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeyringServiceServer struct {
}

func (*UnimplementedKeyringServiceServer) Backend(ctx context.Context, req *BackendRequest) (*BackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backend not implemented")
}
func (*UnimplementedKeyringServiceServer) Key(ctx context.Context, req *KeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Key not implemented")
}
func (*UnimplementedKeyringServiceServer) NewAccount(ctx context.Context, req *NewAccountRequest) (*NewAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedKeyringServiceServer) Sign(ctx context.Context, req *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (*UnimplementedKeyringServiceServer) SaveOffline(ctx context.Context, req *SaveOfflineRequest) (*SaveOfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOffline not implemented")
}

func RegisterKeyringServiceServer(s grpc1.Server, srv KeyringServiceServer) {
	s.RegisterService(&_KeyringService_serviceDesc, srv)
}

func _KeyringService_Backend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringServiceServer).Backend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyring.v1.KeyringService/Backend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringServiceServer).Backend(ctx, req.(*BackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringService_Key_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringServiceServer).Key(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyring.v1.KeyringService/Key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringServiceServer).Key(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringService_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringServiceServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyring.v1.KeyringService/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringServiceServer).NewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyring.v1.KeyringService/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringServiceServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringService_SaveOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringServiceServer).SaveOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyring.v1.KeyringService/SaveOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringServiceServer).SaveOffline(ctx, req.(*SaveOfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keyring.v1.KeyringService",
	HandlerType: (*KeyringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backend",
			Handler:    _KeyringService_Backend_Handler,
		},
		{
			MethodName: "Key",
			Handler:    _KeyringService_Key_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _KeyringService_NewAccount_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _KeyringService_Sign_Handler,
		},
		{
			MethodName: "SaveOffline",
			Handler:    _KeyringService_SaveOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyringPoc/keyring/v1/service.proto",
}
